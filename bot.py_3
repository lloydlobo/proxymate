# Sir, there is no reason to stand here and be insulted....
import datetime
import os
import random
import re

import markovify


def generate_markov_model(input_text):
    """
    Generates a Markov model for the input text.
    The state size is 1 if it's between 00:00:00 and 02:00:00, otherwise it's a random integer between 1 and 3.

    :param input_text: A string containing the input text.
    :return: A tuple containing the Markov model and the state size.
    """
    now = datetime.datetime.now().time()
    start_time = datetime.time(0, 0, 0)
    end_time = datetime.time(2, 0, 0)

    state_size = 1 if start_time <= now <= end_time else random.randint(1, 3)
    text_model = markovify.Text(input_text, state_size=state_size)

    return text_model, state_size


def generate_sentence(text_model, max_chars):
    """
    Generates a sentence using the given Markov model and limits it to max_chars characters,
    without any repeated words.

    :param text_model: A Markov model generated from the input text.
    :param max_chars: The maximum number of characters the generated sentence should have.
    :return: A string containing the generated sentence or None if no valid sentence can be generated.
    """
    if max_chars < 20:
        raise ValueError("max_chars should be at least 20")

    # Return an empty string if max_chars is exactly 20, to avoid errors in markovify
    if max_chars == 20:
        return ""

    sentence = None
    tries = 0
    while sentence is None and tries < 100:
        # Use make_sentence if max_chars is greater than 140
        if max_chars > 140:
            sentence = text_model.make_sentence(tries=100)
        else:
            # Use make_short_sentence if max_chars is less than or equal to 140
            sentence = text_model.make_short_sentence(max_chars=max_chars, tries=100)

        if sentence is not None:
            # Check if the sentence contains repeated words
            words = re.findall(r"\b\w+\b", sentence)
            if len(words) == len(set(words)):
                # Add an ellipsis to the end of the sentence and return it
                return sentence.strip() + "..."

        tries += 1

    # Return None if no valid sentence can be generated
    return None


def generate_sentence_try_while(text_model, max_chars):
    """
    Generates a sentence using the given Markov model and limits it to max_chars characters.
    This function is used as a fallback when generate_sentence fails to generate a valid sentence.

    :param text_model: A Markov model generated from the input text.
    :param max_chars: The maximum number of characters the generated sentence should have.
    :return: A string containing the generated sentence or None if no valid sentence can be generated.
    """
    if max_chars < 20:
        raise ValueError("max_chars should be at least 20")
    # Return an empty string if max_chars is exactly 20, to avoid errors in markovify
    if max_chars == 20:
        return ""

    # Try to generate a sentence with the given max_chars value
    sentence = text_model.make_sentence(max_chars=max_chars)

    # If the sentence is None, try decreasing max_chars and calling make_sentence again
    while sentence is None and max_chars > 20:
        max_chars -= 10
        sentence = text_model.make_sentence

    if sentence is None:
        return None

    # If the generated sentence is too short or too long, try again with a smaller max_chars value
    while len(sentence) < 20 or len(sentence) > max_chars:
        max_chars -= 10
        sentence = text_model.make_sentence(max_chars=max_chars)

        # If make_sentence returns None for all max_chars values, return None
        if sentence is None:
            return None

    # Capitalize the first letter of the sentence and add a period at the end
    sentence = sentence.capitalize() + "."

    return sentence
